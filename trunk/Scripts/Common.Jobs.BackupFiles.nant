<?xml version="1.0"?>
<project name="Common.Jobs.BackupFiles" default="Common.Jobs.BackupFiles" xmlns="http://nant.sf.net/schemas/nant.xsd">

	
<target name="Common.Jobs.BackupFiles">

    	
    	<xmlpeek
		    file="${Project.PropertiesPath}"
		    xpath="/x:project/x:property[@name = 'Project.Name']/@value"
		    property="Project.Name">
		        <namespaces>
        			<namespace prefix="x" uri="http://nant.sf.net/schemas/nant.xsd" />
    			</namespaces>
    	</xmlpeek>
    	
    	
    	<xmlpeek
		    file="${Project.PropertiesPath}"
		    xpath="/x:project/x:property[@name = 'Project.Name']/@value"
		    property="Project.Name">
		        <namespaces>
        			<namespace prefix="x" uri="http://nant.sf.net/schemas/nant.xsd" />
    			</namespaces>
    	</xmlpeek>
    	
    	    	
    	
    	<xmlpeek
		    file="${Project.PropertiesPath}"
		    xpath="/x:project/x:property[@name = 'Project.CompanyName']/@value"
		    property="Project.CompanyName">
		        <namespaces>
        			<namespace prefix="x" uri="http://nant.sf.net/schemas/nant.xsd" />
    			</namespaces>
    	</xmlpeek>

    	
    	<property name="Backup.PropertiesPath" value="${path::combine(Project.RootPath, Project.Name + '.Backup.nant')}" />    	
    	
    	<if test="${file::exists(Backup.PropertiesPath) == false}">	
	    	<property name="Backup.PropertiesPath" value="${path::get-full-path(path::combine(path::combine(path::combine(Project.RootPath, '..'), '..'), 'Projects.Backup.nant'))}" />   
    	</if>
    	
    	<property name="Backup.Timestamp" value="${datetime::get-year(datetime::now())}-${datetime::get-month(datetime::now())}-${datetime::get-day(datetime::now())}--${datetime::get-hour(datetime::now())}-${datetime::get-minute(datetime::now())}-${datetime::get-second(datetime::now())}"/>
    	
    	<if test="${file::exists(Backup.PropertiesPath)}">
	    	<echo message="Backup properties path: ${Backup.PropertiesPath}"/>
	    	
	    	<xmlpeek
			    file="${Backup.PropertiesPath}"
			    xpath="/x:project/x:property[@name = 'Backup.ExternalPath.Net']/@value"
			    property="Backup.ExternalPath.Net">
			        <namespaces>
	        			<namespace prefix="x" uri="http://nant.sf.net/schemas/nant.xsd" />
	    			</namespaces>
	    	</xmlpeek>
	    	
	    	<xmlpeek
			    file="${Backup.PropertiesPath}"
			    xpath="/x:project/x:property[@name = 'Backup.ExternalPath.Mono']/@value"
			    property="Backup.ExternalPath.Mono">
			        <namespaces>
	        			<namespace prefix="x" uri="http://nant.sf.net/schemas/nant.xsd" />
	    			</namespaces>
	    	</xmlpeek>
    	</if>
    	
    	<property name="Backup.ExternalPath.Net" value="${string::replace(Backup.ExternalPath.Net, '${Company.Name}', Project.CompanyName)}"/>
    	<property name="Backup.ExternalPath.Net" value="${string::replace(Backup.ExternalPath.Net, '${Project.Name}', Project.Name)}"/>
    	
    	<property name="Backup.ExternalPath.Mono" value="${string::replace(Backup.ExternalPath.Mono, '${Company.Name}', Project.CompanyName)}"/>
    	<property name="Backup.ExternalPath.Mono" value="${string::replace(Backup.ExternalPath.Mono, '${Project.Name}', Project.Name)}"/>
    	
    	
		<echo message="External net path: ${Backup.ExternalPath.Net}"/>
		<echo message="External mono path: ${Backup.ExternalPath.Mono}"/>
    	
		<if test="${nant.settings.currentframework == 'net-2.0'}">
			<property name="Backup.ZipPath.Internal" value="${path::combine(path::combine(Project.RootPath, 'Backups'), Project.Name + '-' + Backup.Timestamp + '.zip')}"/>
			<property name="Backup.ZipPath.External" value="${path::combine(string::trim(Backup.ExternalPath.Net), Project.Name + '-' + Backup.Timestamp + '.zip')}"/>
		</if>
		<if test="${nant.settings.currentframework == 'mono-2.0'}">
			<property name="Backup.ZipPath.Internal" value="${path::combine(path::combine(Project.RootPath, 'Backups'), Project.Name)}-${Backup.Timestamp}.zip"/>
			<property name="Backup.ZipPath.External" value="${path::combine(Backup.ExternalPath.Mono, Project.Name + '-' + Backup.Timestamp + '.zip')}"/>
		</if>
		
		<echo message="Internal path: ${Backup.ZipPath.Internal}"/>
		<echo message="External path: ${Backup.ZipPath.External}"/>
		<echo message="Project.RootPath: ${Project.RootPath}"/>

		<call target="Common.Actions.ZipBackup"/>

		<call target="Common.Actions.CopyBackupToExternal"/>
	</target>

  <!-- Actions.ZipBackup -->
  <target name="Common.Actions.ZipBackup">
<echo message="Create dir: ${path::get-directory-name(Backup.ZipPath.Internal)}"/>
  	<if test="${directory::exists(path::get-directory-name(Backup.ZipPath.Internal)) == false}">
  		<mkdir dir="${path::get-directory-name(Backup.ZipPath.Internal)}"/>
  	</if>
  	<zip zipfile="${Backup.ZipPath.Internal}" verbose="true">
	    <fileset basedir="${Project.RootPath}">
	        <exclude name="**/*.yap"/>
	        <exclude name="**/*.local.config"/>
	        <exclude name="**/obj/**/*.*"/>
	        <exclude name="**/Logs/**/*.*"/>
	        <exclude name="**/LogsArchive/**/*"/>
	        <exclude name="**/*.pdb"/>
	        <exclude name="**/*._cs"/>
	        <exclude name="**/*._*"/>
	        <exclude name="**/*.csexclude"/>
	        <exclude name="**/*.excluded"/>
	        <exclude name="**/*.excludecs"/>
	        <exclude name="**/*.csproj.user"/>
	        <exclude name="**/*.exclude"/>
	        <exclude name="**/*.security"/>
	        <exclude name="**/*.dll.r*"/>
	        <exclude name="**/*.exe.r*"/>
	        <exclude name="**/App_Data/VS/**"/>
	        <exclude name="**/App_Data/LegacyDefault/**"/>
	        <exclude name="**/App_Data/Legacy/**"/>
	        <exclude name="**/App_Data/Imported/**"/>
	        <exclude name="**/App_Data/LegacyConverted/**"/>
	        <exclude name="**/App_Data/Suspended/**"/>
	        <exclude name="**/fckeditor/**"/>
	        <exclude name="**/Backups/**"/>
	        <exclude name="*_nant"/>
	        <exclude name="**.eqbak"/>
	        <exclude name="**/bin/Debug/**"/>
	        <exclude name="**/bin/Release/**"/>
	        <exclude name="**/Releases/**"/>
	        <exclude name="**/Deployment/**"/>
	        <exclude name="*.refresh"/>
	        <exclude name="**/Docs/Reference/**"/>
	        <include name="**/lib/**" />
	        <include name="**/Src/**" />
	        <include name="**/Docs/**" />
	        <include name="**/Scripts/**" />
	        <include name="**/bin/**" />
	        <include name="**/Commander.*" />
	        <include name="**/InstallCommander.*" />
	        <include name="**/*.Project.nant" />
	        <include name="**/*.Solution.nant" />
	        <include name="**/*.Assembly.nant" />
	    </fileset>	   

	</zip>
  </target>
  
    <target name="Common.Actions.CopyBackupToExternal">
    	<echo message="External backup path: ${Backup.ZipPath.External}"/>
    	<if test="${file::exists(Backup.PropertiesPath)}">
		  	<if test="${directory::exists(path::get-directory-name(Backup.ZipPath.External)) == false}">
		  		<mkdir dir="${path::get-directory-name(Backup.ZipPath.External)}"/>
		  	</if>
		  	<copy 
		    file="${Backup.ZipPath.Internal}"
		    tofile="${Backup.ZipPath.External}" />
		</if>
	</target>
</project>
  	
