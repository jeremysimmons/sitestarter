<?xml version="1.0"?>
<project name="Common.Jobs.BuildSolution" default="Common.Jobs.BuildSolution" xmlns="http://nant.sf.net/schemas/nant.xsd">
	
	
		<xmlpeek
		    file="${Solution.PropertiesPath}"
		    xpath="/x:project/x:property[@name = 'Solution.Name']/@value"
		    property="Solution.Name">
		        <namespaces>
        			<namespace prefix="x" uri="http://nant.sf.net/schemas/nant.xsd" />
    			</namespaces>
    	</xmlpeek>

		<xmlpeek
		    file="${Solution.PropertiesPath}"
		    xpath="/x:project/x:property[@name = 'Solution.BaseNamespace']/@value"
		    property="Solution.BaseNamespace">
		        <namespaces>
        			<namespace prefix="x" uri="http://nant.sf.net/schemas/nant.xsd" />
    			</namespaces>
    	</xmlpeek>

		<xmlpeek
		    file="${Solution.PropertiesPath}"
		    xpath="/x:project/x:property[@name = 'Solution.BuildOrder']/@value"
		    property="Solution.BuildOrder">
		        <namespaces>
        			<namespace prefix="x" uri="http://nant.sf.net/schemas/nant.xsd" />
    			</namespaces>
    	</xmlpeek>

    	 <xmlpeek
		    file="${Solution.PropertiesPath}"
		    xpath="/x:project/x:property[@name = 'Solution.VersionMode']/@value"
		    property="Solution.VersionMode">
		        <namespaces>
        			<namespace prefix="x" uri="http://nant.sf.net/schemas/nant.xsd" />
    			</namespaces>
    	</xmlpeek>
    	
	
  <target name="Common.Jobs.BuildSolution">
		<call target="Common.Actions.CleanSolution"/>
		
		<delete>
    		<fileset>
        		<include name="${Project.RootPath}\bin\${Build.Mode}\*.dll" />
    		</fileset>
		</delete>
		
		<foreach item="String" in="${Solution.BuildOrder}" delim="," property="item">
			<echo message="Looking for assembly '${item}'"/>
			<property name="AssemblyProject.RootPath" value="${path::combine(Solution.RootPath, Solution.BaseNamespace  + '.' + item)}"/>
			<if test="${directory::exists(AssemblyProject.RootPath) == false}">
						<property name="AssemblyProject.RootPath" value="${path::combine(Solution.RootPath, item)}"/>
			</if>
    		<property name="AssemblyProject.PropertiesPath" value="${path::combine(AssemblyProject.RootPath, Solution.Name + '.' + item + '.Assembly.nant')}"/>
			<if test="${file::exists(AssemblyProject.PropertiesPath) == false}">
				<property name="AssemblyProject.PropertiesPath" value="${path::combine(AssemblyProject.RootPath, item + '.Assembly.nant')}"/>
			</if>
    		<echo message="Building assembly from config: ${AssemblyProject.PropertiesPath}"/>
			<if test="${file::exists(AssemblyProject.PropertiesPath)}">
				<echo message="Found assembly config file"/>
				<call target="Common.Jobs.BuildAssembly"/>
			</if>
			<if test="${file::exists(AssemblyProject.PropertiesPath) == false}">
				<echo message="Can't find assembly config file"/>
			</if>
		</foreach>
		<property name="Local.ModulesPath" value="${path::combine(Solution.RootPath, 'Modules')}"/>
		<echo message="Local.ModulesPath: ${Local.ModulesPath}"/>
		<if test="${directory::exists(Local.ModulesPath)}">
			<foreach item="Folder" in="${Local.ModulesPath}"  property="currentModule">
	    		<in>
	        		<items>
	            		<exclude name="${path::combine('**', '.svn')}" />
	            		<exclude name="${path::combine('**', '_svn')}" />
	            		<include name="**" />
	       		 	</items>
	   		 	</in>
	    		<do>
	    				<echo message="Module path: ${currentModule}"/>
	    			<property name="moduleName" value="${path::get-file-name(currentModule)}"/>
					<property name="AssemblyProject.PropertiesPath" value="${path::combine(currentModule, Solution.Name + '.' + moduleName + '.Assembly.nant')}"/>
					<if test="${file::exists(AssemblyProject.PropertiesPath) == false}">
						<property name="AssemblyProject.PropertiesPath" value="${path::combine(currentModule, moduleName + '.Assembly.nant')}"/>
					</if>
					<echo message="Project properties path: ${AssemblyProject.PropertiesPath}"/>
					<if test="${file::exists(AssemblyProject.PropertiesPath)}">
						<call target="Common.Jobs.BuildAssembly"/>
					</if>
	    		</do>
			</foreach>
		</if>

		<if test="${directory::exists(path::combine(Solution.RootPath, 'WWW'))}">
		
			<call target="Common.Jobs.PrepareWWW"/>

			<property name="versionFilePath" value="${path::combine(path::combine(Solution.RootPath, 'WWW'), 'Version.Number')}"/>

			<version buildtype="NoIncrement"
		            	revisiontype="Increment"
		            	path="${versionFilePath}" failonerror="false"/>

			<property name="versionKey" value="${string::replace(Solution.BaseNamespace, '.', '-')}-WWW--${Solution.VersionMode}"/>

			<property name="versionUrl"  value='http://10.0.0.1:8080/scripts/Scripts/VersionNumber.script?Raw=true&amp;IncrementRevision=true&amp;Key=${versionKey}' />
						
			<echo message="Version URL: ${versionUrl}" />

			<get src="${ versionUrl }" dest="${versionFilePath}" failonerror="false" timeout="50000" />

			<loadfile
		    		file="${versionFilePath}"
		    		property="Project.Version" />

			<echo message="New version: ${Project.Version}"/>

			<property name="versionFilePath" value="${path::combine(Solution.RootPath, 'Version.Number')}"/>

			<property name="versionKey" value="${string::replace(Solution.BaseNamespace, '.', '-')}--Project--${Solution.VersionMode}"/>

			<version buildtype="NoIncrement"
	            		revisiontype="Increment"
	            		path="${versionFilePath}" failonerror="false"/>

			<property name="versionUrl"  value='http://10.0.0.1:8080/scripts/Scripts/VersionNumber.script?Raw=true&amp;IncrementRevision=true&amp;Key=${versionKey}' />
						
			<echo message="Version URL: ${versionUrl}" />
						
			<get src="${ versionUrl }" dest="${versionFilePath}" failonerror="false" timeout="50000" />

			<loadfile
		    		file="${versionFilePath}"
		    		property="Project.Version" />

			<echo message="New version: ${Project.Version}"/>


		</if>
	
	</target>
	
  	
     
</project>