using System;
using System.IO;
using System.ComponentModel;
using System.Collections;
using com.db4o;
using com.db4o.query;
using com.db4o.ext;
using System.Reflection;
using SoftwareMonkeys.SiteStarter;
using SoftwareMonkeys.SiteStarter.Entities;
using System.Collections;

namespace SoftwareMonkeys.SiteStarter.Data
{
    /// <summary>
    /// Assists in interaction with the db4o database.
    /// </summary>
	public class Db4oHelper
    {
        #region ObjectContainer
        static private ObjectContainer db;
        /// <summary>
		/// Gets/sets the database ObjectContainer.
		/// </summary>
		static public ObjectContainer DB
		{
			get
			{	
				if (db == null)
					LoadDB();
                return db;
			}
			set
			{
                db = value;
			}
        }

        /// <summary>
        /// Loads the data from the .yap file.
        /// </summary>
        static public void LoadDB()
        {
            // Add messages to the trace
            System.Diagnostics.Trace.WriteLine("===== DB4O =====");
            System.Diagnostics.Trace.WriteLine(Config.Current.MapPath(Config.Current.DatabasePath), "Loading DB");

            if (!Directory.Exists(Path.GetDirectoryName(Config.Current.MapPath(Config.Current.DatabasePath))))
                Directory.CreateDirectory(Path.GetDirectoryName(Config.Current.MapPath(Config.Current.DatabasePath)));

            Db4o.Configure().GenerateUUIDs(Int16.MaxValue);

            DB = Db4o.OpenFile(Config.Current.MapPath(Config.Current.DatabasePath));
        }

        /// <summary>
        /// Closes the data and commits it to the .yap file.
        /// </summary>
        static public void CloseDB()
        {
            if (DB != null)
            {
                DB.Close();
            }
            DB = null;
        }
        #endregion

        #region Data functions
        /// <summary>
        /// Retrieves the UUID of the provided object.
        /// </summary>
        /// <param name="obj">The object to get the ID of.</param>
        /// <returns>The UUID of the provided object.</returns>
        static public string GetID(object obj)
        {
            return DB.Ext().GetObjectInfo(obj).GetUUID().ToString();
        }

        /// <summary>
		/// Retrieves all the objects of the specified type.
		/// </summary>
		/// <param name="type">The type of objects to retrieve.</param>
		/// <returns>An array of the retrieved objects.</returns>
		static public object[] GetObjects(Type type)
		{
			Query query = DB.Query();
			query.Constrain(type);

			ObjectSet os = query.Execute();
			if (!os.HasNext())
				return null;

			ArrayList list = new ArrayList();
			while (os.HasNext())
				list.Add(os.Next());

			return (object[])list.ToArray(typeof(object));
		}

        /// <summary>
        /// Retrieves all the objects of the specified type matching the parameter.
        /// </summary>
        /// <param name="type">The type of objects to retrieve.</param>
        /// <param name="parameterName">The name of the parameter to match.</param>
        /// <param name="parameterValue">The value of the parameter to match.</param>
        /// <returns>An array of the retrieved objects.</returns>
        static public object[] GetObjects(Type type, string parameterName, object parameterValue)
		{
			Query query = DB.Query();
			query.Constrain(type);
            query.Descend(parameterName).Constrain(parameterValue);

			ObjectSet os = query.Execute();
			if (!os.HasNext())
				return null;

			ArrayList list = new ArrayList();
			while (os.HasNext())
				list.Add(os.Next());

			return (object[])list.ToArray(typeof(object));
		}

        /// <summary>
        /// Retrieves the objects of the specified type matching the parameters.
        /// </summary>
        /// <param name="type">The type of objects to retrieve.</param>
        /// <param name="parameters">The parameters to match on the objects.</param>
        /// <returns>An array or the retrieved objects.</returns>
        static public object[] GetObjects(Type type, Hashtable parameters)
		{
			Query query = DB.Query();
			query.Constrain(type);
			foreach (string key in parameters.Keys)
			{
				Constraint constraint = query.Descend(key).Constrain(parameters[key]);
			}

			ObjectSet os = query.Execute();
			if (!os.HasNext())
				return null;

			ArrayList list = new ArrayList();
			while (os.HasNext())
				list.Add(os.Next());

			return (object[])list.ToArray(typeof(object));
		}

        /// <summary>
        /// Retrieves the objects with the provided query.
        /// </summary>
        /// <param name="query">The query to execute when retrieving the objects.</param>
        /// <returns>An array of the retrieved objects.</returns>
        static public object[] GetObjects(Query query)
		{
			ObjectSet os = query.Execute();
			if (!os.HasNext())
				return null;

			ArrayList list = new ArrayList();
			while (os.HasNext())
				list.Add(os.Next());

			return (object[])list.ToArray(typeof(object));
		}

        /// <summary>
        /// Retrieves a single object of the specified type with data matching the provided parameter.
        /// </summary>
        /// <param name="type">The type of object to retrieve.</param>
        /// <param name="parameterName">The name of the parameter to match.</param>
        /// <param name="parameterValue">The value of the parameter to match.</param>
        /// <returns>The object of the specified type with data matching the parameter.</returns>
        static public object GetObject(Type type, string parameterName, object parameterValue)
		{
			Query query = DB.Query();
			query.Constrain(type);
            query.Descend(parameterName).Constrain(parameterValue);

			ObjectSet os = query.Execute();
			if (os.HasNext())
				return os.Next();
			else
				return null;
		}

        /// <summary>
        /// Retrieves a single object of the specified type with data matching the provided parameters.
        /// </summary>
        /// <param name="type">The type of object to retrieve.</param>
        /// <param name="parameters">The parameters to match to the data on the object.</param>
        /// <returns>The object of the specified type with data matching the parameters.</returns>
        static public object GetObject(Type type, Hashtable parameters)
		{
			Query query = DB.Query();
			query.Constrain(type);
			foreach (string key in parameters.Keys)
			{
				query.Descend(key).Constrain(parameters[key]);
			}

			ObjectSet os = query.Execute();
			if (os.HasNext())
				return os.Next();
			else
				return null;
		}

        /// <summary>
        /// Retrieves a single object by executing the provided query.
        /// </summary>
        /// <param name="query">The query to execute.</param>
        /// <returns>The object retrieved when executing the query.</returns>
        static public object GetObject(Query query)
		{
			ObjectSet os = query.Execute();
			if (os.HasNext())
				return os.Next();
			else
				return null;
		}

        /*/// <summary>
        /// Retrieves a single object by executing the provided delegate.
        /// </summary>
        /// <param name="dlgt">The delegate to execute.</param>
        /// <returns>The object retrieved when executing the delegate.</returns>
        static public Collection<obj> Get<obj>(Predicate dlgt)
        {
            return db.Query<obj>(dlgt);
        }*/

        /// <summary>
        /// Searches objects of the specified type to match any of the specified properties with the provided query.
        /// </summary>
        /// <param name="type">The type of object to search.</param>
        /// <param name="fields">An array of field names to search.</param>
        /// <param name="query">The query to look for in one of the specified field names.</param>
        /// <returns>An array of the matching objects.</returns>
        static public object[] SearchObjects(Type type, string[] fields, string query)
		{
			ArrayList list = new ArrayList();

			foreach (string field in fields)
			{
				object[] objects = GetObjects(type, field, query);
				if (objects != null)
				{
					foreach (object obj in objects)
					{
						if (!list.Contains(obj))
							list.Add(obj);
					}
				}
			}

			return list.ToArray();
		}
		
        /// <summary>
        /// Saves the provided entity.
        /// </summary>
        /// <param name="entity">The entity to save.</param>
        static public void SaveObject(Entity entity)
		{
//--- Previous version
			/*DB.Set(obj);

			DB.Commit();*/

//--- New version
            // Pack up the object
            Collection<Entity> unhandled = Pack(entity);

            // Save the entity
            DB.Set(entity);
            // Save the sub-entities that weren't saved automatically
            if (unhandled != null)
            {
                foreach (Entity sub in unhandled)
                    SaveObject(sub);
            }

			DB.Commit();
		}
        
        /// <summary>
        /// Updates the provided entity.
        /// </summary>
        /// <param name="entity">The entity to update.</param>
        static public void UpdateObject(Entity entity)
		{
//--- Previous version
            /*Entity boundEntity;
            if (DB.Ext().IsStored(entity))
                boundEntity = entity;
            else
                boundEntity = (Entity)GetObject(typeof(Entity), "id", entity.ID);

            TransferData(entity, boundEntity);

            DB.Set(boundEntity);

			DB.Commit();*/



//--- New version

            // Get a bound version of the provided entity from the DB
            Entity boundEntity;
            if (DB.Ext().IsStored(entity))
                boundEntity = entity;
            else
                boundEntity = (Entity)GetObject(typeof(Entity), "id", entity.ID);

            // Pack up the entity
            Collection<Entity> subEntities = Pack(entity);

            // Transfer data to the entity bound with the DB
            TransferData(entity, boundEntity);

            // Update the entity
            DB.Set(boundEntity);
            
            // Update the sub-entities that weren't updated automatically
            // TODO: Figure out how to handle sub-entities that were removed while in-memory and need to be deleted in DB
            if (subEntities != null)
            {
                // Loop through the sub-entities and update them
                foreach (Entity sub in subEntities)
                {
                    // Delete the old copy
                    Query query = DB.Query();
                    query.Descend("id").Constrain(sub.ID);
                    object obj = GetObject(query);
                    DeleteObject((Entity)obj);

                    // Save the new copy
                    SaveObject(sub);
                }
            }
			DB.Commit();
		}

        /// <summary>
        /// Deletes the provided entity.
        /// </summary>
        /// <param name="entity">The entity to delete.</param>
        static public void DeleteObject(Entity entity)
		{
//--- Previous version
            /*if (entity != null && entity.ID != Guid.Empty && !DB.Ext().IsStored(entity))
                entity = (Entity)GetObject(typeof(object), "id", entity.ID);

            DB.Delete(entity);

			DB.Commit();*/

//--- New version
            // Make sure that the provided entity is bound to the DB
            if (entity != null && entity.ID != Guid.Empty && !DB.Ext().IsStored(entity))
                entity = (Entity)GetObject(typeof(object), "id", entity.ID);

            // Get the sub-entities
            Collection<Entity> subEntities = entity.Pack();

            // Delete the entity
            DB.Delete(entity);

            // Delete the sub-entities
            if (subEntities != null)
            {
                // Loop through the sub-entities and delete them
                foreach (Entity sub in subEntities)
                    DB.Delete(sub);
            }

            DB.Commit();
		}
		#endregion

        #region Utility functions
        static public void TransferData(Entity source, Entity destination)
        {
            if (source == null)
                throw new ArgumentNullException("source");

            if (destination == null)
                throw new ArgumentNullException("destination");

            foreach (PropertyInfo property in source.GetType().GetProperties())
            {
                PropertyInfo destinationProperty = destination.GetType().GetProperty(property.Name);
                if (destinationProperty.CanWrite)
                    destinationProperty.SetValue(destination, property.GetValue(source, (object[])null), (object[])null);
            }
        }

        /// <summary>
        /// Calls the Pack() function on the object if it's an Entity.
        /// </summary>
        /// <param name="entity">The entity to pack.</param>
        /// <returns>A collection of entities that need to be handled manually (that weren't handled by the Pack function).</returns>
        static public Collection<Entity> Pack(Entity entity)
        {
            return entity.Pack();
        }
        #endregion
    }
}